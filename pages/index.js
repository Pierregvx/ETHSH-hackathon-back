import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { gql } from '@apollo/client';
import client from '../apollo-client';
import { ethers } from 'ethers';

async function signIn() {
  const provider = new ethers.providers.Web3Provider(window.ethereum);

  await provider.send('eth_requestAccounts', []);
}
const daoAddress = "0x7fc5f4f5be07b698365da975218909195404ef89"
export async function getStaticProps() {
  const { data } = await client.query({
    query: gql`
      query Countries {
        dao(id: "0x7fc5f4f5be07b698365da975218909195404ef89") {
          fronts {
            id
            dao {
              id
            }
            state
            timeCreated
            proposals {
              time
              id
            }
          }
        }
      }
    `,
  });
  return {
    props: {
      dao: data.dao,
    },
  };
}

export default function Home({ countries }) {
  return (
    <div className={styles.container}>
      <Head>
        <title>DAOCensus</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <button onClick={signIn}>Sign in</button>
        <h1 className={styles.title}>dao</h1>
        <div className={styles.grid}>
        <a href={`https://arbiscan.io/address/${dao.id}`}>
                  DAO : {dao.id} <br></br>
                </a>
          {countries.map((dao) => (
            <div key={dao.id} className={styles.card}>
              <h3>
                <a href="#country-name" aria-hidden="true" class="aal_anchor" id="country-name">
                  <svg aria-hidden="true" class="aal_svg" height="16" version="1.1" viewBox="0 0 16 16" width="16">
                    <path
                      fill-rule="evenodd"
                      d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                    ></path>
                  </svg>
                </a>

                

                <div>
                  {dao.fronts.map((xj) => (
                    <div key={xj.id}>
                      <h5> Deployment {xj.id}</h5>
                      <h5> state {xj.state}</h5>
                      <h5> time {xj.timeCreated}</h5>
                    </div>
                  ))}
                </div>
              </h3>
              {/* <p>Xp :{dao.xp}</p> */}
              {/* <p>Volume exchanged in the platform: {dao.volume}</p>
              <p>Deposit volume:{dao.deposit}</p>
              <p>Swap volume :{dao.swap}</p>
              <p>Redeem volume :{dao.redeem}</p> */}
              {/* <p>Chains called from Arbitrum: {dao.chains.join(' - ')}</p> */}
            </div>
          ))}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
